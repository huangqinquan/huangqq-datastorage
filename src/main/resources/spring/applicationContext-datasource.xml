<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context

        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/data/elasticsearch http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch.xsd">

    <context:component-scan base-package="com.huangqq.storage" />

    <context:property-placeholder location="classpath:*.properties"/><!-- 加载配置文件 -->

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
              init-method="init" destroy-method="close">
            <property name="driverClassName" value="${jdbc.driverClassName}" />
            <property name="url" value="${jdbc.url}" />
            <property name="username" value="${jdbc.username}" />
            <property name="password" value="${jdbc.password}" />
            <!-- 配置初始化大小、最小、最大 -->
            <property name="initialSize" value="1" />
            <property name="minIdle" value="1" />
            <property name="maxActive" value="10" />

            <!-- 配置获取连接等待超时的时间 -->
            <property name="maxWait" value="10000" />

            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
            <property name="timeBetweenEvictionRunsMillis" value="60000" />

            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
            <property name="minEvictableIdleTimeMillis" value="300000" />

            <property name="testWhileIdle" value="true" />

            <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
            <property name="testOnBorrow" value="true" />
            <property name="testOnReturn" value="false" />

            <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
            <property name="poolPreparedStatements" value="true" />
            <property name="maxPoolPreparedStatementPerConnectionSize"
                      value="20" />

            <!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->

            <property name="defaultAutoCommit" value="true" />

            <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
            <property name="validationQuery" value="select 1 " />
            <property name="filters" value="stat" />
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
        <property name="mapperLocations" value="classpath:com/huangqq/storage/po/**/*.xml" />
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.huangqq.storage.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>


	<!-- spring管理事务 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- Spring的声明式事务管理 -->
	<!-- 设置与事务有关的各种属性 -->
	<!--<tx:advice id="txAdvice" transaction-manager="txManager">-->
		<!--<tx:attributes>-->
			<!--<tx:method name="insert*" propagation="REQUIRED"-->
				<!--rollback-for="Exception" />-->
			<!--<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />-->
			<!--<tx:method name="update*" propagation="REQUIRED"-->
				<!--rollback-for="Exception" />-->
			<!--<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" />-->
			<!--<tx:method name="*" read-only="false" />-->
		<!--</tx:attributes>-->
	<!--</tx:advice>-->

	<!-- 声明切入点 -->
	<!--<aop:config>-->
		<!--<aop:pointcut id="txPointCuts"-->
			<!--expression="execution(* test.dao.*.*(..))" />-->
		<!--<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCuts" />-->
	<!--</aop:config>-->

    <!--spring整合elasticsearch-->
    <!-- Spring data 自动扫描repository接口，生成实现类 -->
    <elasticsearch:repositories base-package="com.huangqq.storage.dao" />

    <!-- ip:port换成具体的ip和端口，多个以逗号分隔 -->
    <elasticsearch:transport-client id="client" cluster-nodes="${elasticsearch.ip}:${elasticsearch.port}" cluster-name="elasticsearch" />

    <bean name="elasticsearchTemplate" class="org.springframework.data.elasticsearch.core.ElasticsearchTemplate">
        <constructor-arg ref="client"/>
    </bean>
</beans>